[grammar (info)] Line 77: 
Production Rules:
   (precedences (shown between parentheses) were set by %prec;
    are equal to the precedence of the rules' 1st terminal tokens;
    or (if not shown) are equal to the default (max) precedence)
1: input ->  <empty>
2: input ->  input line
3: line ('\x0a') ->  '\x0a'
4: line ('\x0a') ->  expr '\x0a'
5: expr (NUMBER) ->  NUMBER
6: expr ('+') ->  expr '+' expr
7: expr ('-') ->  expr '-' expr
8: expr ('*') ->  expr '*' expr
9: expr ('/') ->  expr '/' expr
10: expr (NEG) ->  '-' expr
11: expr (SQUARE) ->  '$' expr
12: expr ('(') ->  '(' expr ')'
13: input_$ ->  input


Symbolic Terminal tokens:
       error
       EOF
   257: NUMBER
    45: '-'
    43: '+'
    42: '*'
    47: '/'
   258: NEG
   259: SQUARE
    10: '\x0a'
    36: '$'
    40: '('
    41: ')'


Grammar States: 

State 0:
13: input_$ ->  . input 
  0:   On input to state 1
  Reduce by 1: input ->  . 


State 1:
13: input_$ -> input  . 
2: input -> input  . line 
  0:   On line to state 2
  1:   On '\x0a' to state 3
  2:   On expr to state 4
  3:   On NUMBER to state 5
  4:   On '-' to state 6
  5:   On '$' to state 7
  6:   On '(' to state 8


State 2:
2: input -> input line  . 
  Reduce by 2: input -> input line  . 


State 3:
3: line -> '\x0a'  . 
  Reduce by 3: line -> '\x0a'  . 


State 4:
4: line -> expr  . '\x0a' 
6: expr -> expr  . '+' expr 
7: expr -> expr  . '-' expr 
8: expr -> expr  . '*' expr 
9: expr -> expr  . '/' expr 
  0:   On '\x0a' to state 9
  1:   On '+' to state 10
  2:   On '-' to state 11
  3:   On '*' to state 12
  4:   On '/' to state 13


State 5:
5: expr -> NUMBER  . 
  Reduce by 5: expr -> NUMBER  . 


State 6:
10: expr -> '-'  . expr 
  0:   On expr to state 14
  1:   On NUMBER to state 5
  2:   On '-' to state 6
  3:   On '$' to state 7
  4:   On '(' to state 8


State 7:
11: expr -> '$'  . expr 
  0:   On expr to state 15
  1:   On NUMBER to state 5
  2:   On '-' to state 6
  3:   On '$' to state 7
  4:   On '(' to state 8


State 8:
12: expr -> '('  . expr ')' 
  0:   On expr to state 16
  1:   On NUMBER to state 5
  2:   On '-' to state 6
  3:   On '$' to state 7
  4:   On '(' to state 8


State 9:
4: line -> expr '\x0a'  . 
  Reduce by 4: line -> expr '\x0a'  . 


State 10:
6: expr -> expr '+'  . expr 
  0:   On expr to state 17
  1:   On NUMBER to state 5
  2:   On '-' to state 6
  3:   On '$' to state 7
  4:   On '(' to state 8


State 11:
7: expr -> expr '-'  . expr 
  0:   On expr to state 18
  1:   On NUMBER to state 5
  2:   On '-' to state 6
  3:   On '$' to state 7
  4:   On '(' to state 8


State 12:
8: expr -> expr '*'  . expr 
  0:   On expr to state 19
  1:   On NUMBER to state 5
  2:   On '-' to state 6
  3:   On '$' to state 7
  4:   On '(' to state 8


State 13:
9: expr -> expr '/'  . expr 
  0:   On expr to state 20
  1:   On NUMBER to state 5
  2:   On '-' to state 6
  3:   On '$' to state 7
  4:   On '(' to state 8


State 14:
10: expr -> '-' expr  . 
6: expr -> expr  . '+' expr 
7: expr -> expr  . '-' expr 
8: expr -> expr  . '*' expr 
9: expr -> expr  . '/' expr 
  0 (removed by precedence):   On '+' to state 10
  1 (removed by precedence):   On '-' to state 11
  2 (removed by precedence):   On '*' to state 12
  3 (removed by precedence):   On '/' to state 13
  Reduce by 10: expr -> '-' expr  . 


State 15:
11: expr -> '$' expr  . 
6: expr -> expr  . '+' expr 
7: expr -> expr  . '-' expr 
8: expr -> expr  . '*' expr 
9: expr -> expr  . '/' expr 
  0 (removed by precedence):   On '+' to state 10
  1 (removed by precedence):   On '-' to state 11
  2 (removed by precedence):   On '*' to state 12
  3 (removed by precedence):   On '/' to state 13
  Reduce by 11: expr -> '$' expr  . 


State 16:
12: expr -> '(' expr  . ')' 
6: expr -> expr  . '+' expr 
7: expr -> expr  . '-' expr 
8: expr -> expr  . '*' expr 
9: expr -> expr  . '/' expr 
  0:   On ')' to state 21
  1:   On '+' to state 10
  2:   On '-' to state 11
  3:   On '*' to state 12
  4:   On '/' to state 13


State 17:
6: expr -> expr '+' expr  . 
6: expr -> expr  . '+' expr 
7: expr -> expr  . '-' expr 
8: expr -> expr  . '*' expr 
9: expr -> expr  . '/' expr 
  0 (removed by precedence):   On '+' to state 10
  1 (removed by precedence):   On '-' to state 11
  2:   On '*' to state 12
  3:   On '/' to state 13
  Reduce by 6: expr -> expr '+' expr  . 


State 18:
7: expr -> expr '-' expr  . 
6: expr -> expr  . '+' expr 
7: expr -> expr  . '-' expr 
8: expr -> expr  . '*' expr 
9: expr -> expr  . '/' expr 
  0 (removed by precedence):   On '+' to state 10
  1 (removed by precedence):   On '-' to state 11
  2:   On '*' to state 12
  3:   On '/' to state 13
  Reduce by 7: expr -> expr '-' expr  . 


State 19:
8: expr -> expr '*' expr  . 
6: expr -> expr  . '+' expr 
7: expr -> expr  . '-' expr 
8: expr -> expr  . '*' expr 
9: expr -> expr  . '/' expr 
  0 (removed by precedence):   On '+' to state 10
  1 (removed by precedence):   On '-' to state 11
  2 (removed by precedence):   On '*' to state 12
  3 (removed by precedence):   On '/' to state 13
  Reduce by 8: expr -> expr '*' expr  . 


State 20:
9: expr -> expr '/' expr  . 
6: expr -> expr  . '+' expr 
7: expr -> expr  . '-' expr 
8: expr -> expr  . '*' expr 
9: expr -> expr  . '/' expr 
  0 (removed by precedence):   On '+' to state 10
  1 (removed by precedence):   On '-' to state 11
  2 (removed by precedence):   On '*' to state 12
  3 (removed by precedence):   On '/' to state 13
  Reduce by 9: expr -> expr '/' expr  . 


State 21:
12: expr -> '(' expr ')'  . 
  Reduce by 12: expr -> '(' expr ')'  . 



