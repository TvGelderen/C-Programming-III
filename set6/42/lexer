%class-name Scanner
%debug

singleCharOperator  [\+\-\*\/\%\|\&\~\^\=<>]
doubleCharOperator  \<\<|\>\>|\&\&|\|\|
intSuffix           [uU]?([lLzZ]|ll|LL)?
encodingPrefix      ([uUL]|u8)
simpleEscapeSeq     \\[\'\"?\\abfnrtv]
numericEscapeSeq    \\(x[0-9a-fA-F]{2}|[0-7]{3})
universalCharNam    \\(u[[:digit:]]{4}|U[[:digit:]]{8})

%%
[ \t\n]                         // ignore whitespace
[[:alpha:]_][[:alnum:]_]*       return IDENTIFIER;
[[:digit:]]+["."][[:digit:]]+   return DOUBLE;


-?[1-9][[:digit:]]*{intSuffix}  return INTEGRAL; // pos/negative allowed
0[0-7]*{intSuffix}              return INTEGRAL; // octal, allowing 000...
(0x|0X)[0-9a-fA-F]+{intSuffix}  return INTEGRAL; // hexadecimal
(0b|0B)[01]+{intSuffix}         return INTEGRAL; // binary



{singleCharOperator}            return OPERATOR;
{doubleCharOperator}            return OPERATOR;
{singleCharOperator}=           return OPERATOR;
(\>\>|\<\<)=                    return OPERATOR;

{encodingPrefix}?\"[^"]*\"      return STRING;  // c++ strings
{encodingPrefix}?\'([^'\\]|{simpleEscapeSeq}|{numericEscapeSeq}|{universalCharNam})\'        return CHAR;    // possibly prefixed

.                               return matched()[0];
