// Generated by Flexc++ V2.07.09 on Tue, 16 Mar 2021 11:54:21 +0100

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "Scannerbase.h"

enum Tokens
{
    IDENTIFIER,
    INTEGRAL,
    OP_ADD          = '+',
    OP_NEG          = '-',
    OP_MUL          = '*',
    OP_DIV          = '/',
    OP_MOD          = '%',
    OP_OR           = '|',
    OP_BITNEG       = '~',
    OP_AND          = '&',
    OP_XOR          = '^',
    OP_ASS          = '=',

    OP_ASS_ADD      = 1000 + '+',
    OP_ASS_NEG      = 1000 + '-',
    OP_ASS_MUL      = 1000 + '*',
    OP_ASS_DIV      = 1000 + '/',
    OP_ASS_MOD      = 1000 + '%',
    OP_ASS_OR       = 1000 + '|',
    OP_ASS_BITNEG   = 1000 + '~',
    OP_ASS_AND      = 1000 + '&',
    OP_ASS_XOR      = 1000 + '^',


    DOUBLE,
    OPERATOR,
    CHAR,
    
    SPACE,
    NEWLINE,
    EOL = 256
};


// $insert classHead
class Scanner: public ScannerBase
{
    public:
        explicit Scanner(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        Scanner(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex_();
        int executeAction_(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum_ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out)
:
    ScannerBase(in, out)
{}

inline Scanner::Scanner(std::string const &infile, std::string const &outfile)
:
    ScannerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int Scanner::lex()
{
    return lex_();
}

inline void Scanner::preCode() 
{
    // optionally replace by your own code
}

inline void Scanner::postCode([[maybe_unused]] PostEnum_ type) 
{
    // optionally replace by your own code
}

inline void Scanner::print() 
{
    print_();
}


#endif // Scanner_H_INCLUDED_

