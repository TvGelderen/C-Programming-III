%class-name Parser
%filenames parser
%parsefun-source parse.cc

%baseclass-preinclude rulevalue.h
%stype RuleValue

%scanner ../scanner/scanner.h

%token  NUMBER
        IDENT
        EXP LN
        SIN COS TAN
        ASIN ACOS ATAN
        SQRT ABS
        RAD DEG GRAD
        E PI

%right  '='
%left   '+' '-'
%right  uMinus

// %debug

%%

lines:
    lines line
|
    line
;


line:
    expr '\n'
    {
        display($1);
    }
|
    error '\n'
    {
        prompt();
    }
|
    '\n'
    {
        prompt();
    }
;


expr:
    NUMBER
    {
        $$ = value();
    }
|
    IDENT
    {
        $$ = variable();
    }
|
    constant
|
    '-' expr            %prec uMinus
    {
        $$ = negate($2);
    }
|
    expr '+' expr
    {
        $$ = add($1, $3);
    }
|
    expr '-' expr
    {
        $$ = sub($1, $3);

    }
|
    '(' expr ')'
    {
        $$ = $2;
    }
|
    expr '=' expr
    {
        $$ = assign($1, $3);
    }
|
    EXP '(' expr ')'
    {
        $$ = exp(valueOf($3));
    }
|
    LN '(' expr ')'
    {
        $$ = log(valueOf($3));
    }
|
    SIN '(' expr ')'
    {
        $$ = sin(valueOf($3));
    }
|
    COS '(' expr ')'
    {
        $$ = cos(valueOf($3));
    }
|
    TAN '(' expr ')'
    {
        $$ = tan(valueOf($3));
    }
|
    ASIN '(' expr ')'
    {
        $$ = asin(valueOf($3));
    }
|
    ACOS '(' expr ')'
    {
        $$ = acos(valueOf($3));
    }
|
    ATAN '(' expr ')'
    {
        $$ = atan(valueOf($3));
    }
|
    SQRT '(' expr ')'
    {
        $$ = sqrt(valueOf($3));
    }
|
    ABS '(' expr ')'
    {
        $$ = abs(valueOf($3));
    }
|
    RAD '(' expr ')'
    {
        $$ = valueOf($3) / 360 * (2 * 3.14159);
    }
|
    DEG '(' expr ')'
    {
        $$ = valueOf($3) / (2 * 3.14159) * 360;
    }
|
    GRAD '(' expr ')'
    {
        $$ = valueOf($3) / 360 * 400;
    }
;

constant:
    E
    {
        $$ = 2.71828;
    }
|
    PI
    {
        $$ = 3.14159;
    }
;
